// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type CapUtilizationSummary struct {
	CapUtilization int `json:"capUtilization"`
	NumContracts   int `json:"numContracts"`
}

type ContractInput struct {
	PlayerID            string                    `json:"playerId"`
	TeamID              string                    `json:"teamId"`
	CurrentYear         int                       `json:"currentYear"`
	RestructureStatus   ContractRestructureStatus `json:"restructureStatus"`
	TotalContractValue  *int                      `json:"totalContractValue"`
	TotalRemainingValue *int                      `json:"totalRemainingValue"`
	ContractLength      *int                      `json:"contractLength"`
	PlayerPosition      string                    `json:"playerPosition"`
	ContractDetails     []*ContractYearInput      `json:"contractDetails"`
}

type ContractRestructureInput struct {
	ContractID                 string               `json:"contractId"`
	ContractRestructureDetails []*ContractYearInput `json:"contractRestructureDetails"`
}

type ContractYear struct {
	Year             int `json:"year"`
	TotalAmount      int `json:"totalAmount"`
	PaidAmount       int `json:"paidAmount"`
	GuaranteedAmount int `json:"guaranteedAmount"`
}

type ContractYearInput struct {
	Year             int `json:"year"`
	TotalAmount      int `json:"totalAmount"`
	PaidAmount       int `json:"paidAmount"`
	GuaranteedAmount int `json:"guaranteedAmount"`
}

type ContractsMetadata struct {
	TotalUtilizedCap  int                    `json:"totalUtilizedCap"`
	TotalAvailableCap int                    `json:"totalAvailableCap"`
	QbUtilizedCap     *CapUtilizationSummary `json:"qbUtilizedCap"`
	RbUtilizedCap     *CapUtilizationSummary `json:"rbUtilizedCap"`
	WrUtilizedCap     *CapUtilizationSummary `json:"wrUtilizedCap"`
	TeUtilizedCap     *CapUtilizationSummary `json:"teUtilizedCap"`
}

type Division struct {
	DivisionName string `json:"divisionName"`
	LeadingWins  *int   `json:"leadingWins"`
}

type DraftPick struct {
	Round           int    `json:"round"`
	Value           *int   `json:"value"`
	OriginalOwnerID string `json:"originalOwnerId"`
}

type DraftYear struct {
	Year  int          `json:"year"`
	Picks []*DraftPick `json:"picks"`
}

type League struct {
	ID         string      `json:"id"`
	LeagueName string      `json:"leagueName"`
	LogoURL    string      `json:"logoUrl"`
	StartDate  time.Time   `json:"startDate"`
	Teams      []*Team     `json:"teams"`
	Divisions  []*Division `json:"divisions"`
}

type NewPlayerNfl struct {
	PlayerName   string  `json:"playerName"`
	Position     string  `json:"position"`
	PositionRank *int    `json:"positionRank"`
	TeamNfl      *string `json:"teamNFL"`
	Birthday     *string `json:"birthday"`
	Avatar       *string `json:"avatar"`
	OverallRank  *int    `json:"overallRank"`
}

type NewTeam struct {
	ID          string     `json:"id"`
	TeamName    string     `json:"teamName"`
	Division    *string    `json:"division"`
	FoundedDate *time.Time `json:"foundedDate"`
}

type NewUser struct {
	OwnerName string `json:"ownerName"`
	Email     string `json:"email"`
	Avatar    string `json:"avatar"`
}

type NewUserRole struct {
	UserID string `json:"userId"`
	Role   string `json:"role"`
}

type PlayerNfl struct {
	ID           string `json:"id"`
	OverallRank  int    `json:"overallRank"`
	PlayerName   string `json:"playerName"`
	Position     string `json:"position"`
	PositionRank int    `json:"positionRank"`
	TeamNfl      string `json:"teamNFL"`
	Birthday     string `json:"birthday"`
	Avatar       string `json:"avatar"`
}

type Team struct {
	ID                       string             `json:"id"`
	FoundedDate              time.Time          `json:"foundedDate"`
	TeamName                 string             `json:"teamName"`
	OwnerID                  string             `json:"ownerID"`
	Division                 *string            `json:"division"`
	CurrentContractsMetadata *ContractsMetadata `json:"currentContractsMetadata"`
	TeamAssets               *TeamAssets        `json:"teamAssets"`
}

type TeamAssets struct {
	DraftPicks []*DraftYear `json:"draftPicks"`
}

type User struct {
	ID        string `json:"id"`
	OwnerName string `json:"ownerName"`
	Email     string `json:"email"`
	Avatar    string `json:"avatar"`
}

type UserPreferences struct {
	ID                string    `json:"id"`
	OwnerName         string    `json:"ownerName"`
	PreferredLeagueID *string   `json:"preferredLeagueId"`
	IsAdmin           *bool     `json:"isAdmin"`
	Leagues           []*League `json:"leagues"`
}

type UserRoles struct {
	ID     string `json:"id"`
	UserID string `json:"userId"`
	Role   string `json:"role"`
}

type ContractRestructureStatus string

const (
	ContractRestructureStatusEligible               ContractRestructureStatus = "ELIGIBLE"
	ContractRestructureStatusIneligible             ContractRestructureStatus = "INELIGIBLE"
	ContractRestructureStatusPreviouslyRestructured ContractRestructureStatus = "PREVIOUSLY_RESTRUCTURED"
)

var AllContractRestructureStatus = []ContractRestructureStatus{
	ContractRestructureStatusEligible,
	ContractRestructureStatusIneligible,
	ContractRestructureStatusPreviouslyRestructured,
}

func (e ContractRestructureStatus) IsValid() bool {
	switch e {
	case ContractRestructureStatusEligible, ContractRestructureStatusIneligible, ContractRestructureStatusPreviouslyRestructured:
		return true
	}
	return false
}

func (e ContractRestructureStatus) String() string {
	return string(e)
}

func (e *ContractRestructureStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContractRestructureStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContractRestructureStatus", str)
	}
	return nil
}

func (e ContractRestructureStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin         Role = "ADMIN"
	RoleLeagueManager Role = "LEAGUE_MANAGER"
	RoleLeagueMember  Role = "LEAGUE_MEMBER"
	RoleTeamOwner     Role = "TEAM_OWNER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleLeagueManager,
	RoleLeagueMember,
	RoleTeamOwner,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleLeagueManager, RoleLeagueMember, RoleTeamOwner:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
