#Data types and Queries
scalar Time

type PlayerNFL {
  id: ID!
  overallRank: Int!
  playerName: String!
  position: String!
  positionRank: Int!
  teamNFL: String!  
  birthday: String!
  avatar: String!
}

type LeaguePost {
  id: ID!
  author: String!
  title: String!
  postDate: Time!
  content: String!
  comments: [PostComment!]
}

type PostComment {
  id: ID!
  author: String!
  content: String!
  commentDate: Time!
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

enum Role {
  ADMIN
  LEAGUE_MANAGER
  LEAGUE_MEMBER
  TEAM_OWNER
}

type Query {
  users: [User]
  leagues: [League]
  league(leagueId: ID): League
  leagueContracts(leagueId: ID!): [Contract!] @hasRole(role: LEAGUE_MEMBER)
  teams(leagueId: ID): [Team!] @hasRole(role: LEAGUE_MEMBER)
  teamById(leagueId: ID!, teamId: ID!): Team @hasRole(role: LEAGUE_MEMBER)
  teamContracts(leagueId: ID, teamId: ID): [Contract!] @hasRole(role: LEAGUE_MEMBER)
  players(numOfResults: Int): [PlayerNFL!]
  player(playerId: ID): PlayerNFL!
  posts(leagueId: ID!, numOfResults: Int): [LeaguePost!]
  comments(leagueId: ID!, postId: ID!): [PostComment!]
  userPreferences(userId: ID): UserPreferences
  getUserRoles(userId:ID): [UserRoles]
}

input NewPostComment {
  author: String!
  content: String!
}

input NewLeaguePost {
  author: String!
  title: String!
  content: String!
}

type Mutation {
  createUser(input: NewUser!): User! @hasRole(role: LEAGUE_MANAGER)
  createTeam(leagueId: ID, input: NewTeam!): Team! @hasRole(role: LEAGUE_MANAGER)
  updateTeamMetaData(leagueId: ID!, teamId: ID!): Team! @hasRole(role: LEAGUE_MEMBER)
  createContract(leagueId: ID, input: ContractInput): Contract! @hasRole(role: LEAGUE_MEMBER)
  createPlayer(input: NewPlayerNFL!): PlayerNFL! @hasRole(role: LEAGUE_MANAGER)
  createPost(leagueId: ID!, input: NewLeaguePost): LeaguePost! @hasRole(role: LEAGUE_MEMBER)
  addComment(leagueId: ID!, postId: ID!, input: NewPostComment): PostComment! @hasRole(role: LEAGUE_MEMBER)
  createUserRole(leagueId: ID, newUserRole: NewUserRole): UserRoles! @hasRole(role: LEAGUE_MANAGER)
  contractActionDrop(leagueId: ID!, teamId: ID!, contractId: ID!): Boolean! @hasRole(role: TEAM_OWNER)
  contractActionRestructure(leagueId: ID!, restructureDetails: ContractRestructureInput!): Contract! @hasRole(role: TEAM_OWNER)
}