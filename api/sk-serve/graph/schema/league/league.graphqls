type LeagueQueries {
    league: League @hasRole(role: LEAGUE_MEMBER)
    contracts: [Contract!] @hasRole(role: LEAGUE_MEMBER)
}
type LeagueMutations {
    makeTradeProposal(tradeAssets: TradeAssets): Boolean @hasRole(role: LEAGUE_MANAGER)
}



type League {
    id: ID!
    currentSeason: Int!
    leagueName: String!
    logoUrl: String!
    startDate: Time!
    teams(search: LeagueTeamFiltering): [Team!]!
    divisions: [Division!]!
}

input NewUserRole {
    userId: ID!
    role: String!
}

input NewLeagueInput {
    leagueName: String!
    logoUrl: String
    startDate: Time
    divisions: [String!]
}

type Division {
    divisionName: String!
    leadingWins: Int
}

# Input used to filter league teams being viewed, TeamId and OwnerId are mutually exclusive in that you may only provide one
input LeagueTeamFiltering {
    teamId: ID
    ownerId: ID
}

input TradeAssets {
    teamId: String!
    draftPicks: [String!]
    contractIds: [ID!]
}
