# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

type CapUtilizationSummary {
    capUtilization: Int!
    numContracts: Int!
}

type Contract {
    contractDetails: [ContractYear!]!
    contractLength: Int!
    contractStatus: ContractStatus!
    currentYear: Int!
    id: ID!
    player: PlayerNFL!
    playerId: String!
    playerPosition: PlayerPosition!
    restructureStatus: ContractRestructureStatus!
    teamId: String!
    totalContractValue: Int!
    totalRemainingValue: Int!
}

type ContractYear {
    guaranteedAmount: Int!
    paidAmount: Int!
    totalAmount: Int!
    year: Int!
}

type ContractsMetadata {
    deadCap: CapUtilizationSummary!
    qbUtilizedCap: CapUtilizationSummary!
    rbUtilizedCap: CapUtilizationSummary!
    teUtilizedCap: CapUtilizationSummary!
    totalAvailableCap: Int!
    totalUtilizedCap: Int!
    wrUtilizedCap: CapUtilizationSummary!
    year: Int!
}

type DeadCap {
    amount: Int!
    associatedContractId: ID!
}

type DeadCapYear {
    deadCapAccrued: [DeadCap!]
    year: Int!
}

type Division {
    divisionName: String!
    leadingWins: Int
}

type DraftPick {
    originalOwnerId: String
    round: Int!
    value: Int
}

type DraftYear {
    picks: [DraftPick]!
    year: Int!
}

type League {
    divisions: [Division!]!
    id: ID!
    leagueName: String!
    logoUrl: String!
    startDate: Time!
    teams(search: LeagueTeamFiltering): [Team!]!
}

type LeaguePost {
    author: String!
    comments: [PostComment!]
    content: String!
    id: ID!
    postDate: Time!
    title: String!
}

type Mutation {
    addComment(input: NewPostComment, leagueId: ID!, postId: ID!): PostComment!
    contractActionDrop(contractId: ID!, leagueId: ID!, teamId: ID!): Boolean!
    contractActionRestructure(leagueId: ID!, restructureDetails: ContractRestructureInput!): Contract!
    createContract(input: ContractInput!, leagueId: ID!): Contract!
    createPlayer(input: NewPlayerNFL!): PlayerNFL!
    createPost(input: NewLeaguePost, leagueId: ID!): LeaguePost!
    createTeam(input: NewTeam!, leagueId: ID): Team!
    createUser(input: NewUser!): User!
    createUserRole(leagueId: ID, newUserRole: NewUserRole): UserRoles!
    updateTeamMetaData(leagueId: ID!, teamId: ID!): Team!
}

type PlayerNFL {
    age: Int!
    avatar: String!
    birthday: String!
    id: ID!
    overallRank: Int!
    playerName: String!
    position: String!
    positionRank: Int!
    team: nflTeam!
}

type PostComment {
    author: String!
    commentDate: Time!
    content: String!
    id: ID!
}

type Query {
    comments(leagueId: ID!, postId: ID!): [PostComment!]
    getUserRoles(userId: ID): [UserRoles]
    league(leagueId: ID): League
    leagueContracts(leagueId: ID!): [Contract!]
    leagueContractsByOwnerId(leagueId: ID!, ownerId: ID!): [Contract!]
    leagues: [League!]
    player(playerId: ID): PlayerNFL!
    players(numOfResults: Int): [PlayerNFL!]
    playersByPosition(position: PlayerPosition!): [PlayerNFL!]
    posts(leagueId: ID!, numOfResults: Int): [LeaguePost!]
    teamById(leagueId: ID!, teamId: ID!): Team
    teamByOwnerId(leagueId: ID!, ownerId: ID!): Team
    teamContracts(leagueId: ID, teamId: ID): [Contract!]
    teams(leagueId: ID): [Team!]
    userPreferences(userId: ID): UserPreferences
    users: [User]
}

type Team {
    activeContracts: [Contract!]
    contractsMetadata: [ContractsMetadata!]
    currentContractsMetadata: ContractsMetadata
    division: String
    foundedDate: Time!
    id: ID!
    teamAssets: TeamAssets
    teamLiabilities: TeamLiabilities
    teamName: String!
    teamOwners: [ID!]
}

type TeamAssets {
    draftPicks: [DraftYear]!
}

type TeamLiabilities {
    deadCap: [DeadCapYear]
}

type Transaction {
    occurrenceDate: Int!
    transactionData: String!
    transactionType: TransactionType!
}

type User {
    avatar: String!
    email: String!
    id: ID!
    ownerName: String!
}

type UserPreferences {
    id: ID!
    isAdmin: Boolean
    leagues: [League!]!
    ownerName: String!
    preferredLeagueId: String
}

type UserRoles {
    id: ID!
    role: String!
    userId: ID!
}

enum ContractRestructureStatus {
    ELIGIBLE
    INELIGIBLE_FINAL_YEAR
    PREVIOUSLY_RESTRUCTURED
}

enum ContractStatus {
    ACTIVE
    INACTIVE_DROPPED
    INACTIVE_EXPIRED
}

enum PlayerPosition {
    QB
    RB
    TE
    WR
}

enum Role {
    ADMIN
    LEAGUE_MANAGER
    LEAGUE_MEMBER
    TEAM_OWNER
}

enum TransactionType {
    CONTRACT_RESTRUCTURE
    DROP_PLAYER
}

enum nflTeam {
    ARI
    ATL
    BAL
    BUF
    CAR
    CHI
    CIN
    CLE
    DAL
    DEN
    DET
    FA
    GB
    HOU
    IND
    JAC
    KC
    LAC
    LAR
    LV
    MIA
    MIN
    NE
    NO
    NYG
    NYJ
    PHI
    PIT
    SEA
    SF
    TB
    TEN
    WAS
}

scalar Time

input ContractInput {
    contractDetails: [ContractYearInput!]!
    contractLength: Int
    contractStatus: ContractStatus
    currentYear: Int!
    playerId: String!
    playerPosition: PlayerPosition!
    restructureStatus: ContractRestructureStatus
    teamId: String!
    totalContractValue: Int
    totalRemainingValue: Int
}

input ContractRestructureInput {
    contractId: ID!
    contractRestructureDetails: [ContractYearInput!]!
}

input ContractYearInput {
    guaranteedAmount: Int!
    paidAmount: Int!
    totalAmount: Int!
    year: Int!
}

input LeagueTeamFiltering {
    ownerId: ID
    teamId: ID
}

input NewLeaguePost {
    author: String!
    content: String!
    title: String!
}

input NewPlayerNFL {
    avatar: String
    birthday: String
    overallRank: Int
    playerName: String!
    position: String!
    positionRank: Int
    team: nflTeam!
}

input NewPostComment {
    author: String!
    content: String!
}

input NewTeam {
    division: String
    foundedDate: Time
    id: ID!
    teamName: String!
}

input NewUser {
    avatar: String!
    email: String!
    ownerName: String!
}

input NewUserRole {
    role: String!
    userId: ID!
}

input TransactionInput {
    transactionData: String!
    transactionType: TransactionType!
}
