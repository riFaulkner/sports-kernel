# Team types and inputs
type Team {
    id: ID!
    foundedDate: Time!
    teamName: String!
    division: String
    currentContractsMetadata: ContractsMetadata @deprecated(reason: "Duplicated, use contractsMetadata at [0]")
    contractsMetadata: [ContractsMetadata!]
    teamAssets: TeamAssets
    teamLiabilities: TeamLiabilities
    teamOwners: [ID!]
    activeContracts: [Contract!]
    accessCodes: [String!]
    teamScoring(year: Int): [TeamScoring!]!
}

type TeamQueries {
    byTeamId(teamId: ID!): Team @hasRole(role: LEAGUE_MEMBER)
    byOwnerId(ownerId: ID!): Team @hasRole(role: LEAGUE_MEMBER)
}

type TeamMutations {
    addDeadCap(leagueId: ID!, teamId: ID!, deadCap: DeadCapInput!): Boolean!
}

input NewTeam {
    id: ID!
    teamName: String!
    division: String
    foundedDate: Time
}

input DeadCapInput {
    associatedContractId: ID
    deadCapYears: [DeadCapYearInput!]!
    deadCapNote: String
}

input DeadCapYearInput {
    year: Int!
    amount: Int!
}

type CapUtilizationSummary {
    capUtilization: Int!
    numContracts: Int!
}

type ContractsMetadata {
    year: Int!
    totalUtilizedCap: Int!
    totalAvailableCap: Int!
    qbUtilizedCap: CapUtilizationSummary!
    rbUtilizedCap: CapUtilizationSummary!
    wrUtilizedCap: CapUtilizationSummary!
    teUtilizedCap: CapUtilizationSummary!
    deadCapUtilizedCap: CapUtilizationSummary!
}

type DeadCap {
    id: ID!
    associatedContractId: ID
    deadCapYears: [DeadCapYear!]!
    deadCapNote: String!
}

type DeadCapYear {
    year: Int!
    amount: Int!
}

type DraftPick {
    round: Int!
    value: Int
    originalOwnerId: String
}
type DraftYear {
    year: Int!
    picks: [DraftPick]!
}
type TeamAssets {
    draftPicks: [DraftYear]!
}
type TeamLiabilities {
    deadCap: [DeadCap]
}
type TeamScoring {
    year: Int!
    summary: TeamScoringSeasonSummary
    weeks: [TeamScoringWeek!]
}
type TeamScoringSeasonSummary {
    wins: Int!
    losses: Int!
    ties: Int!
    currentStreak: Int!
    totalPointsFor: Float!
    totalPointsAgainst: Float!
}

type TeamScoringWeek {
    week: Int!
    pointsFor: Float!
    pointsAgainst: Float!
}