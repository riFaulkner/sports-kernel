#Data types and Queries
scalar Time

type LeaguePost {
  id: ID!
  author: String!
  title: String!
  postDate: Time!
  content: String!
  comments: [PostComment!]
}

type PostComment {
  id: ID!
  author: String!
  content: String!
  commentDate: Time!
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

enum Role {
  ADMIN
  LEAGUE_MANAGER
  LEAGUE_MEMBER
  TEAM_OWNER
}

type Query {
  """ Entry point for league based queries -- league(leagueId: ID!): LeagueQueries @hasRole(role: LEAGUE_MEMBER) """
  users: [User]
  """ Entry point for all team related queries. """
  team(leagueId: ID!): TeamQueries @hasRole(role: LEAGUE_MEMBER)
  """ Entry point for all scoring related queries. """
  scoring(leagueId: ID!): ScoringQueries @hasRole(role: LEAGUE_MEMBER)

  leagues: [League!] @hasRole(role: ADMIN)

  @deprecated(reason: "Moved to leagueQueries.league")
  league(leagueId: ID): League @hasRole(role: LEAGUE_MEMBER)
  @deprecated(reason: "Moved to LeagueQueries.contracts")
  leagueContracts(leagueId: ID!): [Contract!] @hasRole(role: LEAGUE_MEMBER)
  @deprecated(reason:"Moved to LeagueQueries.teams")
  teams(leagueId: ID!): [Team!] @hasRole(role: LEAGUE_MEMBER)
  teamById(leagueId: ID!, teamId: ID!): Team @hasRole(role: LEAGUE_MEMBER) @deprecated(reason: "Old entry point, use the team query entry point instead")
  teamByOwnerId(leagueId: ID!, ownerId: ID!): Team @hasRole(role: LEAGUE_MEMBER) @deprecated(reason: "Old entry point, use the team query entry point instead")
  teamContracts(leagueId: ID!, teamId: ID!): [Contract!] @hasRole(role: LEAGUE_MEMBER)
  contractById(leagueId: ID!, contractId: ID!): Contract @hasRole(role: LEAGUE_MEMBER)
  player(playerId: ID): PlayerNFL!
  players(numOfResults: Int): [PlayerNFL!]
  playersByPosition(position: PlayerPosition!): [PlayerNFL!]
  posts(leagueId: ID!, numOfResults: Int): [LeaguePost!] @hasRole(role: LEAGUE_MEMBER)
  comments(leagueId: ID!, postId: ID!): [PostComment!] @hasRole(role: LEAGUE_MEMBER)
  userPreferences(userId: ID): UserPreferences
  getUserRoles(userId:ID): [UserRoles]
}

input NewPostComment {
  author: String!
  content: String!
}

input NewLeaguePost {
  author: String!
  title: String!
  content: String!
}

type Mutation {
  """ Contract mutation entry point """
  contractMutations: ContractMutations @hasRole(role: LEAGUE_MEMBER)

  """ League mutation entry point """
  leagueMutations(leagueId: ID!):LeagueMutations @hasRole(role: LEAGUE_MEMBER)

  """ Team mutation entry point """
  teamMutations: TeamMutations @hasRole(role: LEAGUE_MEMBER)



  createLeague(input: NewLeagueInput!): League!
  createUser(input: NewUser!): UserPreferences! @hasRole(role: LEAGUE_MANAGER)
  createTeam(leagueId: ID, input: NewTeam!): Team! @hasRole(role: LEAGUE_MANAGER)
  updateTeamMetaData(leagueId: ID!, teamId: ID!): Team! @hasRole(role: LEAGUE_MEMBER)
  createContract(leagueId: ID!, input: ContractInput!): Contract! @hasRole(role: LEAGUE_MEMBER)
  createPlayer(input: NewPlayerNFL!): PlayerNFL! @hasRole(role: ADMIN)
  createPost(leagueId: ID!, input: NewLeaguePost): LeaguePost! @hasRole(role: LEAGUE_MEMBER)
  addComment(leagueId: ID!, postId: ID!, input: NewPostComment): PostComment! @hasRole(role: LEAGUE_MEMBER)
  createUserRole(leagueId: ID, newUserRole: NewUserRole): UserRoles! @hasRole(role: LEAGUE_MANAGER)
  contractActionDrop(leagueId: ID!, teamId: ID!, contractId: ID!): Boolean! @hasRole(role: TEAM_OWNER) # TODO: move to the contract mutations type
  contractActionRestructure(leagueId: ID!, restructureDetails: ContractRestructureInput!): Contract! @hasRole(role: TEAM_OWNER) # TODO: move to contracts mutation
  generateAccessCode(leagueId: ID!, teamId: ID!, role: Role!): String! @hasRole(role: LEAGUE_MANAGER)
  onboardUserToTeamWithAccessCode(accessCode: String!): UserPreferences
}