#Data types and Queries

type Contract {
  playerID: String!
  teamID: String!
  totalContractValue: Float!
  contractLength: Int!
  playerPosition: String!
}

type User {
  id: ID!
  ownerName: String!
  email: String!
  avatar: String!
}

type Team {
  id: ID!
  foundedDate: Time!
  teamName: String!
  ownerID: String!
}

scalar Time

type League {
  id: ID!
  leagueName: String!
  logoUrl: String!
  startDate: Time!
  teams: [Team!]
}

type Query {
  users: [User]
  leagues: [League]
  teams(leagueId: ID): [Team!]
  contracts(leagueId: ID, teamId: ID): [Contract!]
}

#Mutations and Inputs

input NewUser {
  ownerName: String!
  email: String!
  avatar: String!
}

input NewTeam {
  teamName: String!
  foundedDate: Time
}

type Mutation {
  createUser(input: NewUser!): User!
  createTeam(leagueId: ID, input: NewTeam!): Team!
}