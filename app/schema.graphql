# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

type CapUtilizationSummary {
    capUtilization: Int!
    numContracts: Int!
}

type Contract {
    contractDetails: [ContractYear!]!
    contractLength: Int!
    currentYear: Int!
    id: ID!
    player: PlayerNFL!
    playerId: String!
    playerPosition: String
    restructureStatus: ContractRestructureStatus!
    teamId: String!
    totalContractValue: Int!
    totalRemainingValue: Int!
}

type ContractYear {
    guaranteedAmount: Int!
    paidAmount: Int!
    totalAmount: Int!
    year: Int!
}

type ContractsMetadata {
    qbUtilizedCap: CapUtilizationSummary!
    rbUtilizedCap: CapUtilizationSummary!
    teUtilizedCap: CapUtilizationSummary!
    totalAvailableCap: Int!
    totalUtilizedCap: Int!
    wrUtilizedCap: CapUtilizationSummary!
}

type Division {
    divisionName: String!
    leadingWins: Int
}

type DraftPick {
    originalOwnerId: String
    round: Int!
    value: Int
}

type DraftYear {
    picks: [DraftPick]!
    year: Int!
}

type League {
    divisions: [Division!]!
    id: ID!
    leagueName: String!
    logoUrl: String!
    startDate: Time!
    teams: [Team!]!
}

type Mutation {
    contractActionRestructure(leagueId: ID, restructureDetails: ContractRestructureInput!): Contract!
    createContract(input: ContractInput, leagueId: ID): Contract!
    createPlayer(input: NewPlayerNFL!): PlayerNFL!
    createTeam(input: NewTeam!, leagueId: ID): Team!
    createUser(input: NewUser!): User!
    createUserRole(leagueId: ID, newUserRole: NewUserRole): UserRoles!
    updateTeamMetaData(leagueId: ID!, teamId: ID!): Team!
}

type PlayerNFL {
    avatar: String!
    birthday: String!
    id: ID!
    overallRank: Int!
    playerName: String!
    position: String!
    positionRank: Int!
    teamNFL: String!
}

type Query {
    getUserRoles(userId: ID): [UserRoles]
    league(leagueId: ID): League
    leagueContracts(leagueId: ID!): [Contract!]
    leagues: [League]
    player(playerId: ID): PlayerNFL!
    players(numOfResults: Int): [PlayerNFL!]
    teamById(leagueId: ID!, teamId: ID!): Team
    teamContracts(leagueId: ID, teamId: ID): [Contract!]
    teams(leagueId: ID): [Team!]
    userPreferences(userId: ID): UserPreferences
    users: [User]
}

type Team {
    currentContractsMetadata: ContractsMetadata
    division: String
    foundedDate: Time!
    id: ID!
    ownerID: String!
    teamAssets: TeamAssets
    teamName: String!
}

type TeamAssets {
    draftPicks: [DraftYear]!
}

type Transaction {
    occurrenceDate: Int!
    transactionData: String!
    transactionType: TransactionType!
}

type User {
    avatar: String!
    email: String!
    id: ID!
    ownerName: String!
}

type UserPreferences {
    id: ID!
    isAdmin: Boolean
    leagues: [League!]!
    ownerName: String!
    preferredLeagueId: String
}

type UserRoles {
    id: ID!
    role: String!
    userId: ID!
}

enum ContractRestructureStatus {
    ELIGIBLE
    INELIGIBLE_FINAL_YEAR
    PREVIOUSLY_RESTRUCTURED
}

enum Role {
    ADMIN
    LEAGUE_MANAGER
    LEAGUE_MEMBER
    TEAM_OWNER
}

enum TransactionType {
    CONTRACT_RESTRUCTURE
}

scalar Time

input ContractInput {
    contractDetails: [ContractYearInput!]!
    contractLength: Int
    currentYear: Int!
    playerId: String!
    playerPosition: String!
    restructureStatus: ContractRestructureStatus!
    teamId: String!
    totalContractValue: Int
    totalRemainingValue: Int
}

input ContractRestructureInput {
    contractId: ID!
    contractRestructureDetails: [ContractYearInput!]!
}

input ContractYearInput {
    guaranteedAmount: Int!
    paidAmount: Int!
    totalAmount: Int!
    year: Int!
}

input NewPlayerNFL {
    avatar: String
    birthday: String
    overallRank: Int
    playerName: String!
    position: String!
    positionRank: Int
    teamNFL: String
}

input NewTeam {
    division: String
    foundedDate: Time
    id: ID!
    teamName: String!
}

input NewUser {
    avatar: String!
    email: String!
    ownerName: String!
}

input NewUserRole {
    role: String!
    userId: ID!
}

input TransactionInput {
    transactionData: String!
    transactionType: TransactionType!
}
