# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - graph/schema/**.graphqls
  - graph/schema/**.graphql

# Where should the generated server code go?
exec:
  filename: graph/generated/generated.go
  package: generated

# Uncomment to enable federation
# federation:
#   filename: graph/generated/federation.go
#   package: generated

# Where should any generated models go?
model:
  filename: graph/model/models_gen.go
  package: model

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: graph
  package: graph

# Optional: turn on use `gqlgen:"fieldName"` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "github.com/rifaulkner/sports-kernel/api/sk-serve/graph/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Contract:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/contract.Contract
    fields:
      Player:
        resolver: true
  ContractInput:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/contract.ContractInput
  ContractRestructureInput:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/contract.ContractRestructureInput
  ContractYear:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/contract.ContractYear
  ContractYearInput:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/contract.ContractYearInput
  ContractMutations:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/contract.ContractMutations
  Team:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/team.Team
    fields:
      ActiveContracts:
        resolver: true
  TeamMutations:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/team.TeamMutations
  ContractsMetadata:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/team.ContractsMetadata
  TeamAssets:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/team.TeamAssets
  TeamLiabilities:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/team.TeamLiabilities
  TeamScoring:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/team.TeamScoring
  TeamScoringSeasonSummary:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/team.TeamScoringSeasonSummary
  TeamScoringWeek:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/team.TeamScoringWeek
  DraftPick:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/team.DraftPick
  DraftYear:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/team.DraftYear
  DeadCap:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/team.DeadCap
  DeadCapInput:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/team.DeadCapInput
  DeadCapYear:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/team.DeadCapYear
  DeadCapYearInput:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/team.DeadCapYearInput
  CapUtilizationSummary:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/team.CapUtilizationSummary
  NewTeam:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/team.NewTeam
  League:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/league.League
    fields:
      Teams:
        resolver: true
  NewLeagueInput:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/league.NewLeagueInput
  Division:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/league.Division
  UserPreferences:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/user.UserPreferences
  UserPreferencesLeagueSnippet:
    model:
      - github.com/rifaulkner/sports-kernel/api/sk-serve/user.UserPreferencesLeagueSnippet
