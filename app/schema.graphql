# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type CapUtilizationSummary {
    capUtilization: Int!
    numContracts: Int!
}

type Contract {
    contractDetails: [ContractYear!]!
    contractLength: Int!
    currentYear: Int!
    id: ID!
    player: PlayerNFL!
    playerId: String!
    playerPosition: String
    restructureStatus: ContractRestructureStatus!
    teamId: String!
    totalContractValue: Float!
    totalRemainingValue: Float!
}

type ContractDetail {
    currentYearRemainingValue: Float!
    restructuredContract: Boolean!
    totalRemainingValue: Float!
    year1value: Float!
    year2value: Float!
    year3Value: Float!
    year4value: Float!
}

type ContractYear {
    guaranteedAmount: Float!
    paidAmount: Float!
    totalAmount: Float!
    year: Int!
}

type ContractsMetadata {
    qbUtilizedCap: CapUtilizationSummary!
    rbUtilizedCap: CapUtilizationSummary!
    teUtilizedCap: CapUtilizationSummary!
    totalAvailableCap: Int!
    totalUtilizedCap: Int!
    wrUtilizedCap: CapUtilizationSummary!
}

type Division {
    divisionName: String!
    leadingWins: Int
}

type League {
    divisions: [Division!]
    id: ID!
    leagueName: String!
    logoUrl: String!
    startDate: Time!
    teams: [Team!]
}

type Mutation {
    createContract(input: ContractInput, leagueId: ID): Contract!
    createTeam(input: NewTeam!, leagueId: ID): Team!
    createUser(input: NewUser!): User!
}

type PlayerNFL {
    id: ID!
    overallRank: Int!
    playerName: String!
    position: String!
    positionRank: String!
    teamNFL: String!
}

type Query {
    league(leagueId: ID): League
    leagues: [League]
    player(playerId: ID): PlayerNFL!
    players(numOfResults: Int): [PlayerNFL!]
    teamContracts(leagueId: ID, teamId: ID): [Contract!]
    teams(leagueId: ID): [Team!]
    userPreferences(userId: ID): UserPreferences
    users: [User]
}

type Team {
    currentContractsMetadata: ContractsMetadata
    foundedDate: Time!
    id: ID!
    ownerID: String!
    teamName: String!
}

type User {
    avatar: String!
    email: String!
    id: ID!
    ownerName: String!
}

type UserPreferences {
    id: ID!
    leagues: [League!]!
    ownerName: String!
    preferredLeagueId: String
}

enum ContractRestructureStatus {
    ELIGIBLE
    INELIGIBLE
    PREVIOUSLY_RESTRUCTURED
}

input ContractInput {
    contractDetails: [ContractYearInput!]!
    contractLength: Int
    currentYear: Int!
    playerId: String!
    playerPosition: String
    restructureStatus: ContractRestructureStatus!
    teamId: String!
    totalContractValue: Float
    totalRemainingValue: Float
}

input ContractYearInput {
    guaranteedAmount: Float!
    paidAmount: Float!
    totalAmount: Float!
    year: Int!
}

input NewTeam {
    foundedDate: Time
    teamName: String!
}

input NewUser {
    avatar: String!
    email: String!
    ownerName: String!
}


scalar Time