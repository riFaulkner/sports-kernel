#Data types and Queries
scalar Time

type PlayerNFL {
  id: ID!
  overallRank: Int!
  playerName: String!
  position: String!
  positionRank: Int!
  teamNFL: String!  
  birthday: String!
  avatar: String!
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

enum Role {
  ADMIN
  LEAGUE_MANAGER
  LEAGUE_MEMBER
  TEAM_OWNER
}

type Query {
  users: [User]
  leagues: [League]
  league(leagueId: ID): League
  leagueContracts(leagueId: ID!): [Contract!] @hasRole(role: LEAGUE_MEMBER)
  teams(leagueId: ID): [Team!] @hasRole(role: LEAGUE_MEMBER)
  teamById(leagueId: ID!, teamId: ID!): Team @hasRole(role: LEAGUE_MEMBER)
  teamContracts(leagueId: ID, teamId: ID): [Contract!] @hasRole(role: LEAGUE_MEMBER)
  players(numOfResults: Int): [PlayerNFL!]
  player(playerId: ID): PlayerNFL!
  userPreferences(userId: ID): UserPreferences
  getUserRoles(userId:ID): [UserRoles]
}

type Mutation {
  createUser(input: NewUser!): User!
  createTeam(leagueId: ID, input: NewTeam!): Team!
  updateTeamMetaData(leagueId: ID!, teamId: ID!): Team!
  createContract(leagueId: ID, input: ContractInput): Contract!
  createPlayer(input: NewPlayerNFL!): PlayerNFL!
  createUserRole(leagueId: ID, newUserRole: NewUserRole): UserRoles!
}