# Team types and inputs
type Team {
    id: ID!
    foundedDate: Time!
    teamName: String!
    division: String
    currentContractsMetadata: ContractsMetadata
    contractsMetadata: [ContractsMetadata!]
    teamAssets: TeamAssets
    teamLiabilities: TeamLiabilities
    teamOwners: [ID!]
    activeContracts: [Contract!]
    accessCodes: [String!]
    teamScoring(year: Int): [TeamScoring!]!
}

input NewTeam {
    id: ID!
    teamName: String!
    division: String
    foundedDate: Time
}

type CapUtilizationSummary {
    capUtilization: Int!
    numContracts: Int!
}

type ContractsMetadata {
    year: Int!
    totalUtilizedCap: Int!
    totalAvailableCap: Int!
    qbUtilizedCap: CapUtilizationSummary!
    rbUtilizedCap: CapUtilizationSummary!
    wrUtilizedCap: CapUtilizationSummary!
    teUtilizedCap: CapUtilizationSummary!
    deadCap: CapUtilizationSummary!
}
type DeadCap {
    associatedContractId: ID!
    amount: Int!
    contract: Contract
}
type DeadCapYear {
    year: Int!
    deadCapAccrued: [DeadCap!]
}
type DraftPick {
    round: Int!
    value: Int
    originalOwnerId: String
}
type DraftYear {
    year: Int!
    picks: [DraftPick]!
}
type TeamAssets {
    draftPicks: [DraftYear]!
}
type TeamLiabilities {
    deadCap: [DeadCapYear]
}
type TeamScoring {
    year: Int!
    summary: TeamScoringSeasonSummary
    weeks: [TeamScoringWeek!]
}
type TeamScoringSeasonSummary {
    wins: Int!
    losses: Int!
    ties: Int!
    currentStreak: Int!
    totalPointsFor: Float!
    totalPointsAgainst: Float!
}

type TeamScoringWeek {
    week: Int!
    pointsFor: Float!
    pointsAgainst: Float!
}